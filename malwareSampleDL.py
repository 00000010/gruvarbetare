import sys
import zipfile
import requests
import os
from datetime import datetime, timedelta


"""
Script to download a daily malware batch from Abuse.ch's MalwareBazaar datalake.

This script does the following:
1. Presents a disclaimer warning the user about downloading malicious content.
2. Downloads the malware batch for the previous day.
3. Presents a second disclaimer warning about unzipping malicious content.
4. If acknowledged, unzips the downloaded malware batch into a designated directory.

IMPORTANT: Handle all downloaded content with extreme caution. The files contain real malware.
"""

def display_disclaimer(message):
    print("\n" + "="*80)
    print(message)
    print("="*80)
    choice = input("\nDo you acknowledge and wish to continue? [acknowledged/N] ").lower()
    if choice != 'acknowledged':
        print("Operation aborted.")
        sys.exit(0)

# First disclaimer before downloading
download_disclaimer = """
WARNING: You are about to download a zip file containing malicious code.
Ensure that you handle these files with extreme caution.
We are not liable for any outcomes of using or handling this data.
"""
display_disclaimer(download_disclaimer)

BASE_URL = "https://datalake.abuse.ch/malware-bazaar/daily/"
SAMPLES_DIR = "samples"

if not os.path.exists(SAMPLES_DIR):
    os.makedirs(SAMPLES_DIR)

# Get yesterday's date in YYYY-MM-DD format
yesterday = datetime.now() - timedelta(days=1)
date_str = yesterday.strftime('%Y-%m-%d')

url = f"{BASE_URL}{date_str}.zip"

print(f"Downloading daily malware batch for {date_str} ...")

response = requests.get(url, stream=True)
zip_path = os.path.join(SAMPLES_DIR, f"{date_str}.zip")
total_length = response.headers.get('content-length')

if response.status_code == 200:
    with open(os.path.join(SAMPLES_DIR, f"{date_str}.zip"), "wb") as f:
        
        if total_length is None:  # No content length header
            f.write(response.content)
        else:
            dl = 0
            total_length = int(total_length)
            for chunk in response.iter_content(chunk_size=8192):
                dl += len(chunk)
                f.write(chunk)
                done = int(50 * dl / total_length)
                # Print progress as percentage
                sys.stdout.write(f"\r[{'â–ˆ' * done}{'.' * (50-done)}] {int(dl*100/total_length)}%")
                sys.stdout.flush()
    print(f"\nDownloaded {date_str}.zip to {SAMPLES_DIR}")

    unzip_disclaimer = """
    WARNING: You are about to unzip files containing malicious code.
    Ensure that you handle these files with extreme caution.
    We are not liable for any outcomes of using or handling this data.
    """
    display_disclaimer(unzip_disclaimer)

    PASSWORD = "infected"  # Replace with the new password, if needed

    # Unzipping the downloaded file
    print(f"Unzipping {date_str}.zip ...")
    extract_folder = os.path.join(SAMPLES_DIR, date_str)
    with zipfile.ZipFile(zip_path, 'r') as zip:
        # Check if the zip is encrypted before trying to use a password
        for zinfo in zip.infolist():
            is_encrypted = zinfo.flag_bits & 0x1 
            if is_encrypted:
                zip.setpassword(PASSWORD.encode())  # Convert password to bytes
        zip.extractall(extract_folder)
    print(f"Extracted to {extract_folder}")

else:
    print(f"\nFailed to download daily malware batch for {date_str}. Status code: {response.status_code}")
